// Condições são decisões que o código deverá fazer baseado nos valores das variáveis

  // As estruturas de condição iniciam-se com "se"
  se o time não vencer o próximo jogo, o técnico será demitido

    // nesse caso, o algoritmo deverá ler as variáves e executar o bloco de código referente à condição apenas se esta for verdadeira
  cadeia Vencer
  escreva("Ganhou ou Perdeu? ")
  leia(Vencer)
  se (Vencer == "Perdeu") {
    escreva("O técnico foi demitido")
    }

  // Para adicionar um bloco de código para caso da condição ser falsa, usamos "senao"
  se (condição) {
    bloco de código
    } senao {
      escreva("O técnico prossegue no time")  
      }

  // Existem também estruturas condicionais que apresentam mais de uma condição, chamamo-as de expressões
    // As expressões são formadas com os operadores lógicos "e" ou "ou"


  // Como funciona o "e"
//Assim como no português, o "e" funciona logicamente para atribuir um valor a uma conjunção de atributos
  // Por exemplo
    // O número 1 é real e inteiro: Verdadeiro
    // O número 1 é inteiro e par: Falso

// Apenas uma das opções serem Falsas já é o suficiente para atribuir o valor lógico "Falso" a toda a expressão")


  // Como funciona o "ou"
// Do mesmo modo que o "e" possui o mesmo significado do português, o "ou" também tem, sendo ele uma disjunção incluisiva de atributos")
  // Por exemplo
    // O número 1 é real ou par: Verdadeiro
    // O número 1 é real ou ímpar: Verdadeiro
    // O número 1 é par ou cadeia: Falso

// Apenas uma condição ser verdadeira é suficiente para atribuir o valor lógico "Verdadeiro" a toda a expressão")
  
  inteiro Idade
  escreva("Quantos anos você tem? ")
  leia(Idade)
  se (Idade < 18 e Idade != 0) {
    escreva("Você ainda é menor de idade!")
  }

  se (Idade < 0 ou Idade > 120) {
    escreva("Não está entre nós")
  }


    // Existe ainda o caso onde há um intermédio entre o "se"e o "senao", que é o senao se
  se (Condição) {
    bloco de código
  } senao se (Condição) {
    bloco de código
  } senao {
    bloco de código
  }
